{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "# Project 1: Grad School Admission\n",
    "\n",
    "Our goal will be to identify the various factors that may influence admission into graduate school. \n",
    "\n",
    "File called \"admissions.csv\" to be used. \"Admissions.csv\" contains four variables: admit, gre, gpa, rank.\n",
    "\n",
    "- 'admit' is a binary variable and indicates whether or not a candidate was admitted; (admit =1) or not admit (admit= 0)\n",
    "- 'gre' is GRE score\n",
    "- 'gpa' stands for Grade Point Average\n",
    "- 'rank' is the rank of an applicant's undergraduate alma mater, with 1 being the highest and 4 as the lowest\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "##### What is the outcome?\n",
    "\n",
    "- Determine to what extent the given variables influence admission into graduate school"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "##### What are the predictors/covariates?\n",
    "\n",
    "- Student's GRE score, student's GPA, and student's alma mater rank\n",
    "- Target variable = 'admit' (whether student was admitted or not)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "##### What timeframe is the data relevant for?\n",
    "\n",
    "- The data timeframe is not included in: admissions.csv, Project 1 instructions, nor on \"yhat\"'s blog (although the blog is dated March 3, 2013)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### What is the hypothesis?\n",
    "\n",
    "- GRE, GPA, and Rank influence whether a person is admitted to graduate school"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Data Dictionary:\n",
    "\n",
    "            | Variable |         Description         | Variable Type |\n",
    "            |----------|-----------------------------|---------------|\n",
    "            |  admit   |       Target variable       | int64         |\n",
    "            |   gre    |      Score on gre exam      | float64       |\n",
    "            |   gpa    |     Grade point average     | float64       |\n",
    "            |  rank    |        School's rank        | float64       |\n",
    "            \n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploratory Analysis Plan"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1. What are the goals of the exporatory analysis?\n",
    "\n",
    "Identify:\n",
    "    + What information the data file provides, e.g. variables/covariates, target variable\n",
    "    + Types of data fields (int, str, etc)\n",
    "    + Amount (or quantity) of data\n",
    "    + General \"picture\" of the data via .describe() command"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2a. What are the assumptions of the distribution of data?\n",
    "\n",
    "- Distribution of gre and gpa will follow normal distribution pattern\n",
    "- When gre, gpa, and rank are mapped to admit, there will be a positive linear correlation between higher gre/gpa/rank and graduate school admission.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2b. How will I determine the distribution of the data?\n",
    "\n",
    "- I will use df.plot() and df.describe() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3a. How might outliers impact the analysis?\n",
    "\n",
    "- If there are outliers in the data, the outliers would likely need to be excluded from the analysis; the calculated Mean (from 2b) could not be used as a reference until outliers were removed from the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3b. How will I test for outliers?\n",
    "\n",
    "- I will create a histogram and standard deviation graph for the three variables: GRE, Rank, and GPA. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4a. What is collinearity?\n",
    "\n",
    "- In a multiple regression model, collinearity is when two or more predictor variables are strongly correlated."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4b. How will I test for colinearity?\n",
    "\n",
    "- I would run the df.corr() command."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 5.  What is my exploratory analysis plan?\n",
    "\n",
    "- Save the admissions.csv file to my computer\n",
    "- Import pandas, numpy, statsmodels.api, and pylab\n",
    "- Assign assignments.csv to a variable (name I decide to call the file as a dataframe)\n",
    "- Run df.head() command to make sure the file is being read\n",
    "- Run the df.describe() command to view mean, median, std, etc and get a general \"picture\" of the data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### *Dan/Nate - I did the below for my own practice.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   admit    gre   gpa  prestige\n",
      "0      0  380.0  3.61       3.0\n",
      "1      1  660.0  3.67       3.0\n",
      "2      1  800.0  4.00       1.0\n",
      "3      1  640.0  3.19       4.0\n",
      "4      0  520.0  2.93       4.0\n",
      "5      1  760.0  3.00       2.0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "import pylab as pl\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "admissions_data = pd.read_csv(\"admissions.csv\")\n",
    "\n",
    "print admissions_data.head(6)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "admit         int64\n",
      "gre         float64\n",
      "gpa         float64\n",
      "prestige    float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "admissions_data = pd.read_csv(\"admissions.csv\")\n",
    "\n",
    "print admissions_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            admit         gre        gpa    prestige\n",
      "count  400.000000  398.000000  398.00000  399.000000\n",
      "mean     0.317500  588.040201    3.39093    2.486216\n",
      "std      0.466087  115.628513    0.38063    0.945333\n",
      "min      0.000000  220.000000    2.26000    1.000000\n",
      "25%      0.000000         NaN        NaN         NaN\n",
      "50%      0.000000         NaN        NaN         NaN\n",
      "75%      1.000000         NaN        NaN         NaN\n",
      "max      1.000000  800.000000    4.00000    4.000000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/krys/anaconda2/lib/python2.7/site-packages/numpy/lib/function_base.py:3834: RuntimeWarning: Invalid value encountered in percentile\n",
      "  RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "admissions_data = pd.read_csv(\"admissions.csv\")\n",
    "\n",
    "print admissions_data.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x1122b13d0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x1124b8a90>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x11277c610>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x1127ddfd0>]], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11229c990>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "admissions_data = pd.read_csv(\"admissions.csv\")\n",
    "\n",
    "admissions_data.hist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "prestige  1.0  2.0  3.0  4.0\n",
      "admit                       \n",
      "0          28   97   93   55\n",
      "1          33   53   28   12\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "admissions_data = pd.read_csv(\"admissions.csv\")\n",
    "\n",
    "print pd.crosstab(admissions_data['admit'], admissions_data['prestige'], rownames=['admit'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gpa    2.26  2.42  2.48  2.52  2.55  2.56  2.62  2.63  2.65  2.67  ...   3.90  \\\n",
      "admit                                                              ...          \n",
      "0         1     1     1     1     1     1     1     1     0     1  ...      2   \n",
      "1         0     1     0     0     0     0     1     0     1     1  ...      1   \n",
      "\n",
      "gpa    3.91  3.92  3.93  3.94  3.95  3.97  3.98  3.99  4.00  \n",
      "admit                                                        \n",
      "0         1     2     1     4     1     1     0     2    15  \n",
      "1         0     0     0     1     4     0     1     1    13  \n",
      "\n",
      "[2 rows x 132 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "admissions_data = pd.read_csv(\"admissions.csv\")\n",
    "\n",
    "print pd.crosstab(admissions_data['admit'], admissions_data['gpa'], rownames=['admit'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gre    220.0  300.0  340.0  360.0  380.0  400.0  420.0  440.0  460.0  480.0  \\\n",
      "admit                                                                         \n",
      "0          1      2      3      4      8      9      7      8      9     10   \n",
      "1          0      1      1      0      0      2      0      2      4      6   \n",
      "\n",
      "gre    ...    620.0  640.0  660.0  680.0  700.0  720.0  740.0  760.0  780.0  \\\n",
      "admit  ...                                                                    \n",
      "0      ...       18     16     12     11     17      8      7      1      1   \n",
      "1      ...       12      5     12      9      5      3      4      4      4   \n",
      "\n",
      "gre    800.0  \n",
      "admit         \n",
      "0         14  \n",
      "1         11  \n",
      "\n",
      "[2 rows x 26 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "admissions_data = pd.read_csv(\"admissions.csv\")\n",
    "\n",
    "print pd.crosstab(admissions_data['admit'], admissions_data['gre'], rownames=['admit'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111703cd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "admissions_data = pd.read_csv(\"admissions.csv\")\n",
    "\n",
    "plt.ylabel('admit')\n",
    "plt.xlabel('prestige')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
